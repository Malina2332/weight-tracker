# app.py ‚Äî –¢—Ä–µ–∫–µ—Ä –≤–µ—Å–∞ (Streamlit, RU) —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ Google Sheets + –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞



import streamlit as st
import pandas as pd
import numpy as np
import gspread   # ‚Üê AJOUTER CECI
from datetime import date, datetime, timedelta
import altair as alt
from google.oauth2.service_account import Credentials

st.set_page_config(page_title="–¢—Ä–µ–∫–µ—Ä –≤–µ—Å–∞", page_icon="üèÉ‚Äç‚ôÄÔ∏è", layout="wide")

# ---------- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞) ----------
def connect_sheets():
    try:
        sheet_id = st.secrets["sheets"]["sheet_id"]
        creds = Credentials.from_service_account_info(
            st.secrets["gcp_service_account"],
            scopes=["https://www.googleapis.com/auth/spreadsheets"]
        )
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(sheet_id)
        ws = sh.worksheet("Data")
        return {"ok": True, "gc": gc, "sh": sh, "ws": ws, "msg": "OK"}
    except KeyError as e:
        return {"ok": False, "msg": f"–°–µ–∫—Ä–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã/–Ω–µ–≤–µ—Ä–Ω—ã: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {e}. –ü—Ä–æ–≤–µ—Ä—å secrets.toml."}
    except gspread.exceptions.WorksheetNotFound:
        return {"ok": False, "msg": "–õ–∏—Å—Ç 'Data' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∏–º–µ–Ω—É–π –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç –≤ 'Data'."}
    except gspread.exceptions.APIError as e:
        return {"ok": False, "msg": f"API –æ—à–∏–±–∫–∞: {e}. –ü—Ä–æ–≤–µ—Ä—å –¥–æ—Å—Ç—É–ø (–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Üí —Ä–µ–¥–∞–∫—Ç–æ—Ä) –∏ sheet_id."}
    except Exception as e:
        return {"ok": False, "msg": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}"}

conn = connect_sheets()

with st.expander("üîé –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Google Sheets (—Ä–∞—Å–∫—Ä–æ–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)", expanded=not conn["ok"]):
    if conn["ok"]:
        st.success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets: OK")
    else:
        st.error(conn["msg"])
        st.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, –ø–æ–∫–∞ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω

# –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ
gc, sh, ws = conn["gc"], conn["sh"], conn["ws"]

HEADERS = ["–î–∞—Ç–∞","–í–µ—Å (–∫–≥)","–ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)","–ë–µ–ª–∫–∏ (–≥)","–ñ–∏—Ä—ã (–≥)","–£–≥–ª–µ–≤–æ–¥—ã (–≥)","–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏","–í—ã–ø–æ–ª–Ω–µ–Ω–æ","–®–∞–≥–∏","–ó–∞–º–µ—Ç–∫–∏"]
DATE_FMT = "%d.%m.%Y"  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ª–∞—Ç–∏–Ω—Å–∫–∞—è 'm'

def _ensure_headers():
    rows = ws.get_all_values()
    if not rows:
        ws.append_row(HEADERS)
    else:
        hdr = rows[0]
        if hdr != HEADERS:
            ws.update("A1:J1", [HEADERS])

def read_df():
    _ensure_headers()
    rows = ws.get_all_values()
    if len(rows) <= 1:
        return pd.DataFrame(columns=HEADERS)
    df = pd.DataFrame(rows[1:], columns=rows[0])

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
    for c in HEADERS:
        if c not in df.columns:
            df[c] = ""

    # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
    def to_date(x):
        if not x:
            return None
        for fmt in [DATE_FMT, "%Y-%m-%d"]:
            try:
                return datetime.strptime(x, fmt).date()
            except:
                pass
        try:
            return pd.to_datetime(x).date()
        except:
            return None

    df["–î–∞—Ç–∞"] = df["–î–∞—Ç–∞"].apply(to_date)
    for c in ["–í–µ—Å (–∫–≥)","–ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)","–ë–µ–ª–∫–∏ (–≥)","–ñ–∏—Ä—ã (–≥)","–£–≥–ª–µ–≤–æ–¥—ã (–≥)","–®–∞–≥–∏"]:
        df[c] = pd.to_numeric(df[c], errors="coerce")

    return df.dropna(subset=["–î–∞—Ç–∞"]).sort_values("–î–∞—Ç–∞")

def upsert_row(entry: dict):
    _ensure_headers()
    target_str = entry["–î–∞—Ç–∞"].strftime(DATE_FMT)

    # –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É –≤ –∫–æ–ª–æ–Ω–∫–µ A
    col_dates = ws.col_values(1)[1:]  # –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    row_idx = None
    for i, d in enumerate(col_dates, start=2):
        if d == target_str:
            row_idx = i
            break

    values = [
        target_str,
        entry.get("–í–µ—Å (–∫–≥)", ""),
        entry.get("–ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)", ""),
        entry.get("–ë–µ–ª–∫–∏ (–≥)", ""),
        entry.get("–ñ–∏—Ä—ã (–≥)", ""),
        entry.get("–£–≥–ª–µ–≤–æ–¥—ã (–≥)", ""),
        entry.get("–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", ""),
        entry.get("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", ""),
        entry.get("–®–∞–≥–∏", ""),
        entry.get("–ó–∞–º–µ—Ç–∫–∏", ""),
    ]

    if row_idx:
        ws.update(f"A{row_idx}:J{row_idx}", [values])
    else:
        ws.append_row(values, value_input_option="USER_ENTERED")

# ---------- –ë–ª–æ–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤ ----------
st.info("–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–æ —Ä–∞–Ω—å—à–µ ‚Äî –Ω–∞–∂–º–∏ –Ω–∏–∂–µ '–¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏', —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ.")
t1, t2 = st.columns(2)
if t1.button("üß™ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏"):
    try:
        test_entry = {
            "–î–∞—Ç–∞": date.today(),
            "–í–µ—Å (–∫–≥)": 0, "–ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)": 0, "–ë–µ–ª–∫–∏ (–≥)": 0, "–ñ–∏—Ä—ã (–≥)": 0, "–£–≥–ª–µ–≤–æ–¥—ã (–≥)": 0,
            "–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏": "–¢–ï–°–¢", "–í—ã–ø–æ–ª–Ω–µ–Ω–æ": "‚úÖ", "–®–∞–≥–∏": 0, "–ó–∞–º–µ—Ç–∫–∏": "Test row"
        }
        upsert_row(test_entry)
        st.success("–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –ª–∏—Å—Ç 'Data'.")
    except Exception as e:
        st.error(f"–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")

if t2.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"):
    st.experimental_rerun()

# ---------- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ----------
if "start_weight" not in st.session_state: st.session_state.start_weight = 83.0
if "start_date"   not in st.session_state: st.session_state.start_date   = date(2025, 7, 27)
if "target_loss"  not in st.session_state: st.session_state.target_loss  = 30.0
if "weekly_loss"  not in st.session_state: st.session_state.weekly_loss  = 0.75

with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    st.session_state.start_weight = st.number_input("–°—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–µ—Å (–∫–≥)", 30.0, 300.0, value=st.session_state.start_weight, step=0.5)
    st.session_state.start_date   = st.date_input("–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞", value=st.session_state.start_date)
    st.session_state.target_loss  = st.number_input("–¶–µ–ª—å —Å–Ω–∏–∂–µ–Ω–∏—è (–∫–≥)", 1.0, 100.0, value=st.session_state.target_loss, step=0.5)
    st.session_state.weekly_loss  = st.number_input("–°–∫–æ—Ä–æ—Å—Ç—å (–∫–≥/–Ω–µ–¥)", 0.1, 3.0, value=st.session_state.weekly_loss, step=0.05)

st.title("üèÉ‚Äç‚ôÄÔ∏è –¢—Ä–µ–∫–µ—Ä –≤–µ—Å–∞ ‚Äî –º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è")

c1, c2, c3 = st.columns([1,1,1])
with c1:
    d = st.date_input("üìÖ –î–∞—Ç–∞", value=date.today())
with c2:
    w = st.number_input("‚öñÔ∏è –í–µ—Å (–∫–≥)", min_value=0.0, max_value=500.0, step=0.1, format="%.1f")
with c3:
    kcal = st.number_input("üî• –ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)", min_value=0, max_value=20000, step=10)

c4, c5, c6 = st.columns([1,1,1])
with c4:
    prot = st.number_input("üçó –ë–µ–ª–∫–∏ (–≥)", min_value=0, max_value=400, step=1)
with c5:
    fat  = st.number_input("ü•ë –ñ–∏—Ä—ã (–≥)", min_value=0, max_value=400, step=1)
with c6:
    carb = st.number_input("üçö –£–≥–ª–µ–≤–æ–¥—ã (–≥)", min_value=0, max_value=1000, step=1)

c7, c8, c9 = st.columns([1,1,2])
with c7:
    ttype = st.selectbox("üèãÔ∏è –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", ["–°–∏–ª–æ–≤—ã–µ + –ê–∫–≤–∞—Ñ–∏—Ç–Ω–µ—Å","–•–æ–¥—å–±–∞ 10 –∫–º","–û—Ç–¥—ã—Ö"], index=0)
with c8:
    done = st.selectbox("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", ["", "‚úÖ", "‚ùå"], index=0)
with c9:
    steps = st.number_input("üö∂ –®–∞–≥–∏", min_value=0, max_value=200000, step=100)

note = st.text_area("üìù –ó–∞–º–µ—Ç–∫–∏", placeholder="–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, —Ü–∏–∫–ª, —Å–æ–Ω...")

col_btn1, col_btn2 = st.columns(2)
save_clicked = col_btn1.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True)
quick_done   = col_btn2.button("‚úîÔ∏è –û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å (‚úÖ)", use_container_width=True)
if quick_done:
    done = "‚úÖ"

if save_clicked or quick_done:
    entry = {
        "–î–∞—Ç–∞": d, "–í–µ—Å (–∫–≥)": w, "–ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)": kcal, "–ë–µ–ª–∫–∏ (–≥)": prot, "–ñ–∏—Ä—ã (–≥)": fat,
        "–£–≥–ª–µ–≤–æ–¥—ã (–≥)": carb, "–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏": ttype, "–í—ã–ø–æ–ª–Ω–µ–Ω–æ": done, "–®–∞–≥–∏": steps, "–ó–∞–º–µ—Ç–∫–∏": note
    }
    try:
        upsert_row(entry)
        st.success("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google Sheets ‚úÖ")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

st.divider()

def safe_read():
    try:
        return read_df()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return pd.DataFrame(columns=HEADERS)

df = safe_read()
st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
if df.empty:
    st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
else:
    st.dataframe(df.sort_values("–î–∞—Ç–∞", ascending=False).head(10), use_container_width=True)

cur_w = df["–í–µ—Å (–∫–≥)"].dropna().iloc[-1] if not df.dropna(subset=["–í–µ—Å (–∫–≥)"]).empty else None
goal_w = st.session_state.start_weight - st.session_state.target_loss
loss_total = (st.session_state.start_weight - cur_w) if cur_w is not None else None
target_pct = (loss_total / st.session_state.target_loss) if (loss_total is not None and st.session_state.target_loss > 0) else None

m1, m2, m3, m4, m5 = st.columns(5)
m1.metric("–¢–µ–∫—É—â–∏–π –≤–µ—Å", f"{cur_w:.1f}" if cur_w is not None else "‚Äî")
m2.metric("–°–±—Ä–æ—à–µ–Ω–æ –≤—Å–µ–≥–æ", f"{loss_total:.1f}" if loss_total is not None else "‚Äî")
m3.metric("–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏", f"{target_pct*100:.1f}%" if target_pct is not None else "‚Äî")
m4.metric("–¶–µ–ª–µ–≤–æ–π –≤–µ—Å", f"{goal_w:.1f}")
m5.metric("–°–∫–æ—Ä–æ—Å—Ç—å", f"{st.session_state.weekly_loss:.2f} –∫–≥/–Ω–µ–¥")

# –ü–ª–∞–Ω + –≥—Ä–∞—Ñ–∏–∫
plan = pd.DataFrame()
plan["–î–∞—Ç–∞"] = pd.date_range(st.session_state.start_date, periods=400, freq="D")
plan["–ü–ª–∞–Ω (–∫–≥)"] = [max(st.session_state.start_weight - st.session_state.weekly_loss*(i/7.0), goal_w) for i in range(400)]

dfc = df.copy()
if not dfc.empty:
    dfc["–î–∞—Ç–∞"] = pd.to_datetime(dfc["–î–∞—Ç–∞"])

chart_df = pd.merge(plan, dfc[["–î–∞—Ç–∞","–í–µ—Å (–∫–≥)"]], on="–î–∞—Ç–∞", how="left")

st.subheader("üìà –í–µ—Å: –§–∞–∫—Ç vs –ü–ª–∞–Ω")
chart = alt.Chart(chart_df).transform_fold(
    ["–í–µ—Å (–∫–≥)", "–ü–ª–∞–Ω (–∫–≥)"], as_=["–°–µ—Ä–∏—è", "–ó–Ω–∞—á–µ–Ω–∏–µ"]
).mark_line().encode(
    x=alt.X("–î–∞—Ç–∞:T", title="–î–∞—Ç–∞"),
    y=alt.Y("–ó–Ω–∞—á–µ–Ω–∏–µ:Q", title="–í–µ—Å (–∫–≥)"),
    color="–°–µ—Ä–∏—è:N"
).properties(height=360)
st.altair_chart(chart, use_container_width=True)
