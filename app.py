# app.py ‚Äî –¢—Ä–µ–∫–µ—Ä –≤–µ—Å–∞ –¥–ª—è iPhone (Streamlit, RU)
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, date, timedelta
import altair as alt

st.set_page_config(page_title="–¢—Ä–µ–∫–µ—Ä –≤–µ—Å–∞", page_icon="üèÉ‚Äç‚ôÄÔ∏è", layout="wide")

DATE_FMT = "%d.%m.%Y"
COLS = ["–î–∞—Ç–∞", "–í–µ—Å (–∫–≥)", "–ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)", "–ë–µ–ª–∫–∏ (–≥)", "–ñ–∏—Ä—ã (–≥)", "–£–≥–ª–µ–≤–æ–¥—ã (–≥)",
        "–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–í—ã–ø–æ–ª–Ω–µ–Ω–æ (‚úÖ/‚ùå)", "–®–∞–≥–∏", "–ó–∞–º–µ—Ç–∫–∏"]

DEFAULT_TYPES = ["–°–∏–ª–æ–≤—ã–µ + –ê–∫–≤–∞—Ñ–∏—Ç–Ω–µ—Å", "–•–æ–¥—å–±–∞ 10 –∫–º", "–û—Ç–¥—ã—Ö"]

@st.cache_data
def load_df():
    return pd.DataFrame(columns=COLS)

def forecast_series(start_date, start_weight, weekly_loss, days=400, goal_weight=None):
    if goal_weight is None:
        goal_weight = max(30.0, start_weight - 100)
    dates = [start_date + timedelta(days=i) for i in range(days)]
    weights = [max(start_weight - weekly_loss*(i/7.0), goal_weight) for i in range(days)]
    return pd.DataFrame({"–î–∞—Ç–∞": dates, "–ü–ª–∞–Ω (–∫–≥)": weights})

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏)
if "start_weight" not in st.session_state: st.session_state.start_weight = 83.0
if "start_date"   not in st.session_state: st.session_state.start_date   = date(2025, 7, 27)
if "target_loss"  not in st.session_state: st.session_state.target_loss  = 30.0
if "weekly_loss"  not in st.session_state: st.session_state.weekly_loss  = 0.75
if "df" not in st.session_state: st.session_state.df = load_df()

st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
st.sidebar.number_input("–°—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–µ—Å (–∫–≥)", 30.0, 300.0, key="start_weight")
st.sidebar.date_input("–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞", key="start_date")
st.sidebar.number_input("–¶–µ–ª—å —Å–Ω–∏–∂–µ–Ω–∏—è (–∫–≥)", 1.0, 100.0, key="target_loss")
st.sidebar.number_input("–°–∫–æ—Ä–æ—Å—Ç—å (–∫–≥/–Ω–µ–¥)", 0.1, 3.0, key="weekly_loss")

st.title("üèÉ‚Äç‚ôÄÔ∏è –¢—Ä–µ–∫–µ—Ä –≤–µ—Å–∞ ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∂—É—Ä–Ω–∞–ª")

# –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ (–¥–∞—Ç–∞ = —Å–µ–≥–æ–¥–Ω—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
c1, c2, c3, c4 = st.columns(4)
with c1:
    d = st.date_input("–î–∞—Ç–∞", value=date.today())
with c2:
    w = st.number_input("–í–µ—Å (–∫–≥)", min_value=0.0, max_value=500.0, step=0.1, format="%.1f")
with c3:
    kcal = st.number_input("–ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)", min_value=0, max_value=20000, step=10)
with c4:
    steps = st.number_input("–®–∞–≥–∏", min_value=0, max_value=200000, step=100)

c5, c6, c7 = st.columns(3)
with c5:
    prot = st.number_input("–ë–µ–ª–∫–∏ (–≥)", min_value=0, max_value=400, step=1)
with c6:
    fat = st.number_input("–ñ–∏—Ä—ã (–≥)", min_value=0, max_value=400, step=1)
with c7:
    carbs = st.number_input("–£–≥–ª–µ–≤–æ–¥—ã (–≥)", min_value=0, max_value=1000, step=1)

c8, c9 = st.columns(2)
with c8:
    ttype = st.selectbox("–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", DEFAULT_TYPES, index=0)
with c9:
    done = st.selectbox("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", ["", "‚úÖ", "‚ùå"], index=0)

note = st.text_area("–ó–∞–º–µ—Ç–∫–∏", placeholder="–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, —Å–æ–Ω, —Ü–∏–∫–ª, —á—Ç–æ –ø–æ–º–æ–≥–ª–æ/–º–µ—à–∞–ª–æ‚Ä¶")

if st.button("–î–æ–±–∞–≤–∏—Ç—å / –û–±–Ω–æ–≤–∏—Ç—å"):
    df = st.session_state.df.copy()
    new_row = {COLS[0]: d, COLS[1]: w, COLS[2]: kcal, COLS[3]: prot, COLS[4]: fat, COLS[5]: carbs,
               COLS[6]: ttype, COLS[7]: done, COLS[8]: steps, COLS[9]: note}
    if not df.empty and d in set(df["–î–∞—Ç–∞"]):
        df.loc[df["–î–∞—Ç–∞"] == d, :] = new_row
    else:
        df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
    st.session_state.df = df.sort_values("–î–∞—Ç–∞")
    st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

st.divider()

df = st.session_state.df.copy()
st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
st.dataframe(df.sort_values("–î–∞—Ç–∞", ascending=False).head(10), use_container_width=True)

# –ú–µ—Ç—Ä–∏–∫–∏
colA, colB, colC, colD, colE = st.columns(5)
cur_w = df["–í–µ—Å (–∫–≥)"].dropna().iloc[-1] if not df.dropna(subset=["–í–µ—Å (–∫–≥)"]).empty else None
loss_total = (st.session_state.start_weight - cur_w) if cur_w is not None else None
target_pct = (loss_total / st.session_state.target_loss) if (loss_total and st.session_state.target_loss>0) else None
goal_w = st.session_state.start_weight - st.session_state.target_loss

colA.metric("–¢–µ–∫—É—â–∏–π –≤–µ—Å", f"{cur_w:.1f}" if cur_w is not None else "‚Äî")
colB.metric("–°–±—Ä–æ—à–µ–Ω–æ –≤—Å–µ–≥–æ", f"{loss_total:.1f}" if loss_total is not None else "‚Äî")
colC.metric("–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏", f"{target_pct*100:.1f}%" if target_pct is not None else "‚Äî")
colD.metric("–¶–µ–ª–µ–≤–æ–π –≤–µ—Å", f"{goal_w:.1f}")
colE.metric("–°–∫–æ—Ä–æ—Å—Ç—å", f"{st.session_state.weekly_loss:.2f} –∫–≥/–Ω–µ–¥")

# –ü—Ä–æ–≥–Ω–æ–∑ –∏ –≥—Ä–∞—Ñ–∏–∫
forecast = forecast_series(st.session_state.start_date, st.session_state.start_weight,
                           st.session_state.weekly_loss, days=400, goal_weight=goal_w)
chart_df = pd.merge(forecast, df[["–î–∞—Ç–∞","–í–µ—Å (–∫–≥)"]], on="–î–∞—Ç–∞", how="left")

st.subheader("–ì—Ä–∞—Ñ–∏–∫: –§–∞–∫—Ç vs –ü–ª–∞–Ω")
chart = alt.Chart(chart_df).transform_fold(
    ["–í–µ—Å (–∫–≥)", "–ü–ª–∞–Ω (–∫–≥)"], as_=["–°–µ—Ä–∏—è", "–ó–Ω–∞—á–µ–Ω–∏–µ"]
).mark_line().encode(
    x=alt.X("–î–∞—Ç–∞:T", title="–î–∞—Ç–∞"),
    y=alt.Y("–ó–Ω–∞—á–µ–Ω–∏–µ:Q", title="–í–µ—Å (–∫–≥)"),
    color="–°–µ—Ä–∏—è:N"
).properties(height=360)
st.altair_chart(chart, use_container_width=True)
